*** DEPOIS DE CRIAR UMA API PING/PONG EM INDEX

*** Exercício 1 : Crie uma API simples que retorne uma mensagem. Feito isso, gerencie seus processos da seguinte maneira:
> Crie UM processo no PM2 utilizando o CLI;
m2 start index.js --name meu-primeiro-pmu

> Restart e recarregue o processo utilizando o CLI do PM2 (lembre-se que há comandos distintos para cada um);
(COM DOWNTIME)
pm2 restart meu-primeiro-pmu 

(SEM DOWNTIME)
pm2 reload meu-primeiro-pmu 

> Pare o processo;
pm2 stop meu-primeiro-pmu

- (Bônus) - Escalone para mais 5 processos;
pm2 scale meu-primeiro-pmu +5

- (Bônus) - Defina para 3 a quantidade de processos;
pm2 scale meu-primeiro-pmu 3

> Remova o processo da listagem do PM2 ;
 pm2 delete meu-primeiro-pmu

*** Exercício 2 : Crie um arquivo ecosystem . O arquivo configurará o PM2 para:
> Observar alterações no diretório da aplicação e, caso ocorram, reiniciar automaticamente sua aplicação;
// ecosystem.config.yml
apps:
- name: meu-primeiro-pmu
  script: ./index.js
  exec_mode: cluster
  instances: max
  watch: true
  max_memory_restart: 100M

pm2 start index.js --name meu-primeiro-pmu --watch (CASO QUEIRA RODAR O COMANDO, MAS O PROPRIO ECOSYSTEM JÁ ESTA CONFIGURADO)

> Ativar o modo cluster e configurar a quantidade de processos rodando para o máximo possível;
pm2 start index.js -i max --name meu-primeiro-pmu --watch (CASO QUEIRA RODAR O COMANDO, MAS O PROPRIO ECOSYSTEM JÁ ESTA CONFIGURADO)

> Reiniciar o processo sempre que ele alcançar o consumo de 100MB de memória.
pm2 start index.js --name name meu-primeiro-pmu --max-memory-restart 100M (CASO QUEIRA RODAR O COMANDO, MAS O PROPRIO ECOSYSTEM JÁ ESTA CONFIGURADO)

*** Exercício 3 : Explorando variáveis de ambiente:
> Adicione à API o uso de uma variável de ambiente que altere a mensagem exibida em sua resposta ou outro comportamento que preferir;
// ecosystem.config.yml FICARÁ ASSIM:
apps:
- name: meu-primeiro-pmu
  script: ./index.js
  exec_mode: cluster
  watch: true
  max_memory_restart: 100M
  env_meu-primeiro-pmu:
    MINHA_VAR: SOU-A-VAR

pm2 start ecosystem.config.yml --env meu-primeiro-pmu --watch

> Adicione ao arquivo ecosystem do exercício anterior dois contextos de variáveis: env_prod e env_homolog .
// ecosystem.config.yml FICARÁ ASSIM:
apps:
- name: meu-primeiro-pmu
  script: ./index.js
  exec_mode: cluster
  watch: true
  max_memory_restart: 100M
  env_meu-primeiro-pmu:
    MINHA_VAR: SOU-A-VAR
  env_prod:
    MINHA_VAR: SOU-A-VAR-DE-PROD
  env_homolog:
    MINHA_VAR: SOU-A-VAR-DE-HOMOLOG

> Execute o processo utilizando o contexto prod . Em seguida, execute o processo utilizando o contexto homolog . Valide se o comportamento foi alterado.
(P/ prod)
pm2 start ecosystem.config.yml --env prod --watch

(P/ homolog)
pm2 start ecosystem.config.yml --env homolog --watch

*** Exercício 4 : Adicione monitoramento à sua API:
> Crie uma conta no PM2;
> Adicione o monitoramento à API dos exercícios anteriores, utilizando o comando do CLI do PM2;
> Verifique se o dashboard web está exibindo as informações de sua API.
pm2 plus
pm2 link (chaves)

*** Exercício 5 : Adicione à API criada um endpoint que simule um erro de produção. Para isso, pode ser utilizado o comando process.exit . O objetivo é fazer com que o processo pare e então o PM2 entre em ação para restartá-lo.
// index.js
app.get('/kill', (req, res) => {
  res.send('Matou');
  process.exit();
});

***  Exercício 6 Adicione mais de um processo a ser iniciado pelo seu arquivo ecosystem . Para isso, pode-se adicionar dois processos com comportamentos diferentes, através do mesmo código fonte, ou adicionar mais uma API ou script ao projeto. A ideia é que, ao executar utilizando o ecosystem , o PM2 suba processos com nomes e características diferentes.
...
CRIA OUTRO ARQUIVO "INDEX" COM OUTRO ENDPOINT E PORTA DIFERENTE, ADICIONA AO ECOSYSTEM E RODA

*** Exercício 7 : Execute sua API utilizando o runtime do PM2. Para isso:
> Adicione o módulo do pm2 às dependências do projeto;
> Altere o script de start do seu app ( package.json ) para utilizar o runtime do pm2. Lembre-se de referenciar seu arquivo ecosystem ;
> Execute o script através do npm ou yarn .
...
  "scripts": {
    "start": "pm2 start ecosystem.config.yml --env prod --watch",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
...

npm start