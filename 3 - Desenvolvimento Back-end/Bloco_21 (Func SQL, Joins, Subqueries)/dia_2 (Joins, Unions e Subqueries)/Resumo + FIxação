*** Cruzando dados de diferentes tabelas ***

*** INNER JOIN ***
-- UTILIZANDO DADOS DA TABELA CITY + COUNTRY
SELECT city.city, city.country_id, country.country
FROM sakila.city AS city
INNER JOIN sakila.country AS country
ON city.country_id = country.country_id;

-- O AS PODE SER OMITIDO, INSERINDO O APELIDO LOGO APÓS
SELECT a.first_name, a.actor_id, f.actor_id
FROM sakila.actor a
INNER JOIN film_actor f
ON a.actor_id = f.actor_id; 
-- *** DICA => SE A QUERY FOR MUITO EXTENSA, UTILIZE O NOME COMPLETO, SE NÃO, APENAS A PRIMEIRA LETRA ***

*** fixação... ***
-- Monte uma query que exiba o id do ator , nome do ator e id do filme em que ele já atuou usando as tabelas actor e film_actor .
SELECT a.actor_id, CONCAT(a.first_name, ' ', a.last_name), f.film_id 
FROM sakila.actor AS a
INNER JOIN sakila.film_actor AS f
ON a.actor_id = f.actor_id;

-- Use o JOIN para exibir o nome , sobrenome e endereço de cada um dos funcionários do banco. Use as tabelas staff e address .
SELECT first_name, last_name, address
FROM sakila.staff AS staff
INNER JOIN sakila.address AS address
ON staff.address_id = address.address_id;

-- Exiba o id do cliente , nome e email dos primeiros 100 clientes, ordenados pelo nome em ordem decrescente, juntamente com o id do endereço e o nome da rua onde o cliente mora. Essas informações podem ser encontradas nas tabelas customer e address .
SELECT c.customer_id, c.first_name, c.email, a.address_id, a.address
From sakila.customer AS c
INNER JOIN sakila.address AS a
ON c.address_id = a.address_id
ORDER BY c.first_name DESC
LIMIT 100;

-- Exiba o nome , email , id do endereço , endereço e distrito dos clientes que moram no distrito da California e que contêm "rene" em seus nomes. As informações podem ser encontradas nas tabelas address e customer .
SELECT c.first_name, c.email, a.address, a.district
FROM sakila.customer AS c
INNER JOIN sakila.address AS a
ON c.address_id = a.address_id
WHERE a.district = 'California'
AND first_name LIKE '%rene%';

-- Exiba o nome e a quantidade de endereços dos clientes cadastrados. Ordene seus resultados por nomes de forma decrescente. Exiba somente os clientes ativos. As informações podem ser encontradas na tabela address e customer .
SELECT c.first_name, COUNT(a.address)
FROM sakila.customer AS c
INNER JOIN sakila.address AS a
ON c.address_id = a.address_id
GROUP BY c.first_name
ORDER BY c.first_name DESC;

-- Monte uma query que exiba o nome , sobrenome e a média de valor ( amount ) paga aos funcionários no ano de 2006. Use as tabelas payment e staff . Os resultados devem estar agrupados pelo nome e sobrenome do funcionário.
SELECT s.first_name, s.last_name, AVG(p.amount)
FROM sakila.staff s
INNER JOIN sakila.payment p
ON s.staff_id = p.staff_id
WHERE YEAR(p.payment_date) = 2006
GROUP BY s.staff_id;

-- Monte uma query que exiba o id do ator , nome , id do filme e título do filme , usando as tabelas actor , film_actor e film . Dica: você precisará fazer mais de um JOIN na mesma query .
SELECT actor.actor_id, actor.first_name, film.film_id, film.title
FROM sakila.film film
INNER JOIN sakila.actor actor
INNER JOIN sakila.film_actor film_actor
ON actor.actor_id = film_actor.actor_id AND film.film_id = film_actor.film_id;

-- ALTERNATIVA

SELECT actor.actor_id, actor.first_name, film.film_id, film.title
FROM sakila.film_actor film_actor
INNER JOIN sakila.actor actor
ON actor.actor_id = film_actor.actor_id
INNER JOIN sakila.film film
ON film.film_id = film_actor.film_id;

*** LEFT/RIGHT JOIN ***
-- IRÁ PRIOZAR OS DADOS DE UM DETERMINADO LADO, TRAZENDO TODOS AQUELES + O QUE HÁ DE COMUM COM O LADO OPOSTO
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    a.actor_id,
    a.first_name,
    a.last_name
FROM sakila.customer AS c
LEFT JOIN sakila.actor AS a
ON c.last_name = a.last_name
ORDER BY c.last_name;
-- A DIFRENÇA PARA O INNER JOIN, É QUE ESTE ÚLTIMO, SÓ TRAZ O QUE HÁ DE COMUM EM AMBOS OS LADOS (ZONA DE INTERSEÇÃO)

*** SELF JOIN ***
-- COMPARA A TABELA A ELA MESMA
SELECT t1.title, t1.replacement_cost, t2.title, t2.replacement_cost
FROM sakila.film AS t1, sakila.film AS t2
WHERE t1.length = t2.length;

*** fixação ***
-- Queremos saber os ids e custos de substituição dos filmes que possuem o mesmo custo de substituição.
SELECT t1.film_id, t1.replacement_cost, t2.film_id, t2.replacement_cost
FROM sakila.film AS t1, sakila.film AS t2
WHERE t1.replacement_cost = t2.replacement_cost;

-- Exiba o título e a duração de empréstimo dos filmes que possuem a mesma duração. Exiba apenas os filmes com a duração de empréstimo entre 2 e 4 dias.
SELECT t1.title, t1.rental_duration, t2.title, t2.rental_duration
FROM sakila.film AS t1, sakila.film AS t2
WHERE t1.rental_duration = t2.rental_duration
AND t1.rental_duration BETWEEN 2 AND 4;

*** UNION/ UNION ALL ***
-- UNE TABELAS, MAS PRECISAM TER A MESMA QTD DE COLUNAS
-- => PARA BURLAR ESSE PROBLEMA, ADICIONA-SE COLUNAS VAZIAS
SELECT first_name, last_name, '-' AS 'customer_id' FROM sakila.actor
UNION ALL
SELECT first_name, last_name, customer_id FROM sakila.customer;

-- UNION => UNE COLUNAS DE TABELAS, SEM REPETIR
-- UNION => UNE COLUNAS DE TABELAS, MESMO SE REPETIR

-- PARA GARANTIR A ORDENAÇÃO TOTAL, DEVE-SE COLOCAR OS SELECTS ENTRE () E DEPOIS UTILIZAR ORDER BY
(SELECT first_name, last_name, '-' AS 'customer_id' FROM sakila.actor)
UNION ALL
(SELECT first_name, last_name, customer_id FROM sakila.customer)
ORDER BY first_name, last_name;

-- PARA LIMITAR E EXIBIR ALGUNS EM UMA PÁGINA
(SELECT first_name, last_name, '-' AS 'customer_id' FROM sakila.actor LIMIT 20)
UNION ALL
(SELECT first_name, last_name, customer_id FROM sakila.customer LIMIT 20)
ORDER BY first_name, last_name
LIMIT 10 OFFSET 20;
-- DA MANEIRA ACIMA, SERIA EXIBIDO A SEGUNDA PÁGINA

*** fixação ***
-- Todos os funcionários foram promovidos a atores. Monte uma query que exiba a união da tabela staff com a tabela actor , exibindo apenas o nome e o sobrenome . Seu resultado não deve excluir nenhum funcionário ao unir as tabelas.
SELECT first_name, last_name FROM sakila.staff
UNION ALL
SELECT first_name, last_name FROM sakila.actor;

-- Monte uma query que una os resultados das tabelas customer e actor , exibindo os nomes que contêm a palavra "tracy" na tabela customer e os que contêm "je" na tabela actor . Exiba apenas os resultados únicos.
SELECT first_name FROM sakila.customer
WHERE first_name LIKE '%tracy%'
UNION
SELECT first_name FROM sakila.actor
WHERE first_name LIKE '%je%';

-- Monte uma query que exiba a união dos cinco últimos nomes da tabela actor , o primeiro nome da tabela staff e cinco nomes a partir da 15ª posição da tabela customer . Não permita que dados repetidos sejam exibidos. Ordene os resultados em ordem alfabética.
(SELECT first_name FROM sakila.actor ORDER BY actor_id DESC LIMIT 5)
UNION
(SELECT first_name FROM sakila.staff LIMIT 1)
UNION 
(SELECT first_name FROM sakila.customer LIMIT 5 OFFSET 14)
ORDER BY first_name;

-- Você quer exibir uma lista paginada com os nomes e sobrenomes de todos os clientes e atores do banco de dados, em ordem alfabética. Considere que a paginação está sendo feita de 15 em 15 resultados e que você está na 4ª página. Monte uma query que simule esse cenário.
(SELECT first_name, last_name FROM sakila.customer)
UNION
(SELECT first_name, last_name FROM sakila.actor)
ORDER BY first_name, last_name
LIMIT 15 OFFSET 45;

*** SUBQUERY ***
-- Usando uma SUBQUERY como fonte de dados para o FROM .
SELECT f.title, f.rating
FROM (
    SELECT *
    FROM sakila.film
    WHERE rating = 'R'
) AS f;

-- Preenchendo uma coluna de um SELECT por meio de uma SUBQUERY .
SELECT
    address,
    district,
    (
        SELECT city
        FROM sakila.city
        WHERE city.city_id = sakila.address.city_id
    ) AS city
FROM sakila.address;

-- Filtrando resultados com WHERE usando como base os dados retornados de uma SUBQUERY .
SELECT address, district
FROM sakila.address
WHERE city_id in (
    SELECT city_id
    FROM sakila.city
    WHERE city in ('Sasebo', 'San Bernardino', 'Athenai', 'Myingyan')
);

-- Usando uma tabela externa, de fora da SUBQUERY , dentro dela.
SELECT
    first_name,
    (
        SELECT address
        FROM sakila.address
        WHERE address.address_id = tabela_externa.address_id
    ) AS address
FROM sakila.customer AS tabela_externa;

-- NA TOMADA DE DECISÃO ENTRE SUBQUERY OU JOIN, ESCOLHER + PERFORMATICA

*** EXISTS ***
-- PARA SABER QUAIS CLIENTES FIZERAM RESERVAS
SELECT * FROM hotel.Customers AS c
WHERE EXISTS (
SELECT * FROM hotel.Reservations
WHERE c.CustomerId = Reservations.CustomerId
);

-- PARA SABER QUAIS CLIENTES Ñ FIZERAM RESERVAS
SELECT * FROM hotel.Customers AS c
WHERE NOT EXISTS (
SELECT * FROM hotel.Reservations
WHERE c.CustomerId = Reservations.CustomerId
);

-- PARA SABER QUAIS EMPRESAS Ñ POSSUEM PRODUTO UTILIZADO
SELECT `Name` FROM praticando.manufacturers AS m
WHERE NOT EXISTS (
	SELECT * FROM praticando.products
    WHERE Manufacturer = m.Code
);

*** fixação ***
-- Usando o EXISTS na tabela books_lent e books , exiba o id e título dos livros que ainda não foram emprestados.
SELECT Id, Title FROM hotel.Books AS a
WHERE NOT EXISTS (
	SELECT * FROM hotel.Books_Lent
    WHERE a.Id = book_id
);

-- Usando o EXISTS na tabela books_lent e books , exiba o id e título dos livros estão atualmente emprestados e que contêm a palavra "lost" no título.
SELECT Id, Title FROM hotel.Books AS a
WHERE EXISTS (
	SELECT * FROM hotel.Books_Lent
    WHERE a.Id = book_id AND a.Title LIKE '%lost%'
);

-- Usando a tabela carsales e customers , exiba apenas o nome dos clientes que ainda não compraram um carro.
SELECT `Name` FROM hotel.Customers AS c
WHERE NOT EXISTS (
	SELECT * FROM hotel.CarSales
    WHERE c.CustomerID = CustomerID
);

-- Usando o comando EXISTS em conjunto com JOIN e as tabelas cars , customers e carsales , exiba o nome do cliente e o modelo do carro de todos os clientes que fizeram compras de carros.
SELECT customer.name, cars.name 
FROM hotel.Customers AS customer
INNER JOIN hotel.Cars AS cars
WHERE EXISTS (
	SELECT * FROM hotel.CarSales
    WHERE CustomerID = customer.CustomerId
    AND carID = cars.ID
)

