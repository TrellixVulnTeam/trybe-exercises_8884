*** Exercícios 25.2 *** (utilizando o banco erp)
- Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes . Algumas dicas:
  => arredonde para baixo o valor da idade;
  => calcule a idade usando a diferença entre a data corrente e a data de nascimento;
  => 1 dia é igual a 86400000 milissegundos.
	
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } }
	]).pretty();

- Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } },
	{ $match: { idade: { $gte: 18, $lte: 25 } } },
	{ $count: "clientes" }
	]).pretty();

- Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .
>	NESTE CASO, AINDA É POSSÍVEL UTILIZAR O LOOKUP SIMPLES
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } },
	{ $lookup: {
	from: "vendas",
	let: { clientes_clienteId: "$clienteId" },
	pipeline: [
	{ $match: { $expr: { $eq: ["$$clientes_clienteId", "$clienteId"] } } }
	],
	as: "compras"
	} },
	]).pretty();

- Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020 .
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } },
	{ $lookup: {
	from: "vendas",
	let: { clientes_clienteId: "$clienteId" },
	pipeline: [
	{ $match: { $expr: { $eq: ["$$clientes_clienteId", "$clienteId"] } } }
	],
	as: "compras"
	} },
	{ $match: { "compras.dataVenda": { $gte: ISODate("2019-06-01"), $lt: ISODate("2020-04-01") } } }
	]).pretty();

- Exercício 5 : Confira o número de documentos retornados pelo pipeline com o método count() . Até aqui, você deve ter 486 documentos sendo retornados.
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } },
	{ $lookup: {
	from: "vendas",
	let: { clientes_clienteId: "$clienteId" },
	pipeline: [
	{ $match: { $expr: { $eq: ["$$clientes_clienteId", "$clienteId"] } } }
	],
	as: "compras"
	} },
	{ $match: { "compras.dataVenda": { $gte: ISODate("2019-06-01"), $lt: ISODate("2020-04-01") } } },
	{ $count: "clientes" }
	]).pretty();

- Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais compras.
	db.clientes.aggregate([
	{ $addFields: { idade: { $floor: { $divide: [{ $subtract: ["$$NOW", "$dataNascimento"] }, (365 * 86400000)] } } } },
	{ $lookup: {
	from: "vendas",
	let: { clientes_clienteId: "$clienteId" },
	pipeline: [
	{ $match: { $expr: { $eq: ["$$clientes_clienteId", "$clienteId"] } } }
	],
	as: "compras"
	} },
	{ $match: { "compras.dataVenda": { $gte: ISODate("2019-06-01"), $lt: ISODate("2020-04-01") } } },
	{ $group: { _id: "$endereco.uf", compras: { $sum: 1 } } },
	{ $sort: { compras: -1 } },
	{ $limit: 5 }
	]).pretty();

- Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:
	db.vendas.aggregate([
	{ $unwind: "$itens" },
	{ $match: { "itens.nome": "QUEIJO PRATO" } },
	{ $lookup: {
	from: "clientes",
	let: { clientes_clienteId: "$clienteId" },
	pipeline: [
	{ $match: { $expr: { $eq: ["$$clientes_clienteId", "$clienteId"] } } }
	],
	as: "cliente"
	} },
	{ $group: { _id: { nome: "$cliente.nome", uf: "$cliente.endereco.uf" }, totalConsumido: { $sum: "$itens.quantidade" } } },
	{ $unwind: "$_id.nome" },
	{ $unwind:  "$_id.uf" },
	{ $project: { nome: "$_id.nome", uf: "$_id.uf", totalConsumido: 1, _id: 0 } },
	{ $sort: { totalConsumido: -1 } },
	{ $limit: 1 }
	]).pretty();

>	SUGESTÃO GABARITO (MAIS EFICIENTE, POIS PRIMEIRO AGRUPA PELO CLIENTE ID, PARA SOMENTE DEPOIS LINKAR COM OS OUTROS DADOS).
	db.vendas.aggregate([
	{ $match: { "itens.nome": "QUEIJO PRATO" } },
	{ $unwind: "$itens" },
	{ $match: { "itens.nome": "QUEIJO PRATO" } },
	{ $group: {_id: "$clienteId", totalConsumido: { $sum: "$itens.quantidade" } } },
	{ $sort: { totalConsumido: -1 } },
	{ $limit: 1 },
	{ $lookup: { // Seleciona todos os clientes com as suas respectivas transações feitas;
	from: 'clientes',
	localField: '_id',
	foreignField: 'clienteId',
	as: 'cliente' } },
	{ $unwind: "$cliente" },
	{ $project: { nomeCliente: "$cliente.nome", uf: "$cliente.endereco.uf", totalConsumido: "$totalConsumido", _id: 0 } }
	]);
	

-Exercício 8 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO . Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista
	db.vendas.aggregate([
	{ $match: { "dataVenda": { $gte: ISODate("2020-03-01"), $lt: ISODate("2020-04-01") }, "status": "EM SEPARACAO" } },
	{ $addFields: { dataEntregaPrevista: { $add: ["$dataVenda", 3 * 24 * 60 * 60000] } } },
	{ $project: { clienteId: 1, dataVenda: 1, dataEntregaPrevista: 1, _id: 0 } }
	]).pretty();
	
- Exercício 9 : Calcule a diferença absoluta em dias entre a data da primeira entrega prevista e a última, considerando o pipeline do exercício 8.
	db.vendas.aggregate([
	{ $match: { "dataVenda": { $gte: ISODate("2020-03-01"), $lt: ISODate("2020-04-01") }, "status": "EM SEPARACAO" } },
	{ $addFields: { dataEntregaPrevista: { $add: ["$dataVenda", 3 * 24 * 60 * 60000] } } },
	{ $project: { clienteId: 1, dataVenda: 1, dataEntregaPrevista: 1, _id: 0 } },
	{ $group: { _id: "null", max: { $max: "$dataEntregaPrevista" }, min: { $min: "$dataEntregaPrevista" } } },
	{ $project: {_id: 0, delta: { $ceil: { $abs: { $divide: [{ $subtract: ["$max", "$min"] }, 86400000] } } } } }
	]).pretty();
