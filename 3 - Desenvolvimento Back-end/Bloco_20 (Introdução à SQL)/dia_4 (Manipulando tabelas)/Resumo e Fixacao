*** INSERT INTO ***
INSERT INTO nome_da_tabela (coluna1, coluna2) VALUES
('valor_1','valor_2'),
('valor_3','valor_4'),
('valor_5','valor_6');

-- Ignorando linhas existentes
INSERT IGNORE INTO pessoas (id, name) VALUES
(4,'Gloria'), -- Sem o IGNORE, essa linha geraria um erro e o INSERT não continuaria.
(5,'Amanda');

-- Pesquisando agora, você verá que a informação duplicada não foi inserida.
-- Porém os dados corretos foram inseridos com sucesso.
SELECT * FROM pessoas;

-- Colunas com auto_increment são ignoradas no insert

-- INSERT SELECT (Inserindo dados de uma outra tabela)
INSERT INTO tabelaA (coluna1, coluna2)
SELECT tabelaB.coluna1, tabelaB.coluna2
FROM tabelaB
WHERE tabelaB.nome_da_coluna <> 'algumValor'
ORDER BY tabelaB.coluna_de_ordenacao;

-- PARA COPIAR TODOS OS DADOS COM SELECT *, É OBRIGATÓRIO POSSUIR A MESMA QTD DE COLUNAS E OS TIPOS DE DADOS IGUAIS

-- EXEMPLO
INSERT INTO sakila.actor (first_name, last_name)
SELECT first_name, last_name FROM sakila.staff;

*** fixação... ***

-- ADICIONA 2 PESSOAS EM sakila.staff
INSERT IGNORE INTO sakila.staff ( first_name, last_name, address_id, email, store_id, active, username, password)
VALUES
('Gloria', 'Pires', 2, 'g@sakilastaff.com', 2, 1, 'gp', 'trybe'),
('Cleo', 'Pires', 3, 'c@sakilastaff.com', 2, 1, 'cp', 'trybe');

-- ADICIONA OS 5 PRIMEIROS NOMES DE CUSTOMER EM ACTOR
INSERT INTO  sakila.actor(first_name, last_name)
SELECT first_name, last_name FROM sakila.customer
LIMIT 5

-- CADASTRE 3 CATEGORIAS EM CATEGORY
INSERT IGNORE INTO sakila.category (name) VALUES
('Surf'),
('Tech'),
('Nature');

-- CADASTRE UMA NOVA LOJA EM STORE
INSERT IGNORE INTO sakila.store (manager_staff_id, address_id) VALUES
(3, 2);

*** UPDATE ***
-- ALTERANDO VALORES
-- 1 TABELA | 2 - NOVO VALOR | 3 - VALOR QUE SERÁ ALTERADO
UPDATE sakila.staff
SET first_name = 'Rannveig'
WHERE first_name = 'Ravein';

-- A CONFIG safe updates mode (por padrão) SÓ PERMITE UPDATE E DELETE VERIFICANDO ID, ASSIM, DO MODO ANTERIOR, NÃO FUNCIONARIA

-- SOLUÇÃO (DESATIVA, 0 = FALSE)
SET SQL_SAFE_UPDATES = 0;

-- ALTERANDO MAIS DE UMA COLUNA
UPDATE sakila.staff
SET first_name = 'Rannveig', last_name = 'Jordan'
WHERE staff_id = 4;

-- UPDATE EM MASSA
-- Opção 1 - Incluindo a lista de condições fixas
UPDATE sakila.actor
SET first_name = 'JOE'
WHERE actor_id IN (1,2,3);

-- Opção 2 - Especificando como cada entrada será alterada individualmente
UPDATE sakila.actor
SET first_name = (
CASE actor_id WHEN 1 THEN 'JOE' -- se actor_id = 1, alterar first_name para 'JOE'
              WHEN 2 THEN 'DAVIS' -- se actor_id = 2, alterar first_name para 'DAVIS'
              WHEN 3 THEN 'CAROLINE' -- se actor_id = 3, alterar first_name para 'CAROLINE'
          ELSE first_name -- em todos os outros casos, mantém-se o first_name
END);

-- UPDATE EM SEQUENCIAL (c/ ORDER BY ou c/ LIMIT tb)
UPDATE nome_da_tabela
SET coluna1 = valor1, coluna2 = valor2
[WHERE condições]
[ORDER BY expressao [ ASC | DESC ]]
[LIMIT quantidade_resultados];

-- Exemplo:
UPDATE sakila.staff
SET password = 'FavorResetarSuaSenha123'
WHERE active = 1
ORDER BY last_update
LIMIT 2;

-- safe-update PREVINE ACIDENTES E VEM POR PADRÃO COM A SEGUINTE CONFIGURAÇÃO QUE PODE SER ALTERADA:
SET sql_safe_updates=1, sql_select_limit=1000, max_join_size=1000000;
-- sql_select_limit =1000 limita o conjunto de resultados SELECT a 1.000 linhas, a menos que a instrução inclua LIMIT .
-- max_join_size =1.000.000 faz com que as instruções SELECT de várias tabelas produzam um erro se o servidor estimar que deve examinar mais de 1.000.000 combinações de linhas.

*** fixação... ***
-- Atualize o primeiro nome de todas as pessoas da tabela sakila.actor que possuem o primeiro nome "JULIA" para "JULES".
SET SQL_SAFE_UPDATES = 0;
UPDATE sakila.actor
SET first_name = 'JULES'
WHERE first_name = 'Julia';

-- Foi exigido que a categoria "Sci-Fi" seja alterada para "Science Fiction".
UPDATE sakila.category
SET name = 'Science Fiction'
WHERE name = 'Sci-Fi';

AFFAIR PREJUDICE
AFRICAN EGG
ALABAMA DEVIL

-- Atualize o valor do aluguel para $25 de todos os filmes com duração maior que 100 minutos e que possuem a classificações "G" , "PG" ou "PG-13" e um custo de substituição maior que $20.
UPDATE sakila.film
SET rental_rate = 25
WHERE length > 100
AND rating IN('G', 'PG', 'PG-13')
AND replacement_cost > 20;

-- Foi determinado pelo setor financeiro que haverá um reajuste em todos os preços dos filmes, com base em sua duração. Para todos os filmes com duração entre 0 e 100, o valor do aluguel passará a ser $10,00, e o aluguel dos filmes com duração acima de 100 passará a ser de $20,00.
UPDATE sakila.film
SET rental_rate = (
CASE 
WHEN length <= 100 THEN 10
WHEN length > 100 THEN 20
END);

*** DELETE ***

-- POR NORMAS DE SEGURANÇA, MUITAS VEZES EXCLUIR PODE NA VERDADE TORNAR A INFORMAÇÃO INATIVA, POR SEGURANÇA.

-- DELETE
DELETE FROM banco_de_dados.tabela
WHERE coluna = 'valor';
-- O WHERE é opcional. Porém, sem ele, todas as linhas da tabela seriam excluídas.

DELETE FROM sakila.film_text
WHERE title = 'ACADEMY DINOSAUR';

-- LEMBRAR DO SAFE_UPDATES

-- QUANDO HÁ primary key ou foreign keys
-- Rejeita o comando DELETE.
ON DELETE NO ACTION;

-- Rejeita o comando DELETE.
ON DELETE RESTRICT;

-- Permite a exclusão dos registros da tabela pai, e seta para NULL os registros da tabela filho.
ON DELETE SET NULL;

-- Exclui a informação da tabela pai e registros relacionados.
ON DELETE CASCADE;

-- DÁ ERRO
DELETE FROM sakila.actor
WHERE first_name = 'GRACE';

-- SOLUÇÃO...
-- 1 DELETA A REFERENCIA DA TABELA
DELETE FROM sakila.film_actor
WHERE actor_id = 7; -- actor_id = 7 é o Id de GRACE

-- 2 AGORA É POSSÍVEL DELETAR
DELETE FROM sakila.actor
WHERE first_name = 'GRACE';

-- TRUCATE para deletar todos os registros de uma tabela (!!!p/ testes ou necessidade!!!)
TRUNCATE banco_de_dados.tabela;

*** fixação... ***

-- Exclua do banco de dados o ator com o nome de "KARL".
SELECT * FROM sakila.actor
WHERE first_name = 'Karl';

DELETE FROM sakila.film_actor
WHERE actor_id = 12;

DELETE FROM sakila.actor
WHERE first_name = 'Karl';

-- Exclua do banco de dados os atores com o nome de "MATTHEW".
SELECT * FROM sakila.actor
WHERE first_name = 'MATTHEW';

DELETE FROM sakila.film_actor
WHERE actor_id IN (8, 103, 181);

DELETE FROM sakila.actor
WHERE first_name = 'MATTHEW';

-- Exclua da tabela film_text todos os registros que possuem a palavra "saga" em suas descrições.
DELETE FROM sakila.film_text
WHERE description LIKE '%saga%';

-- Apague da maneira mais performática possível todos os registros das tabelas film_actor e film_category .
TRUNCATE sakila.film_actor;
TRUNCATE sakila.film_category;


