*** Updates Complexos ***

*** $push ***
-- Adiciona o valor ao array. Caso o campo não exista, será criado.
 { $push: { <campo1>: <valor1>, ... } }

>	INSERT
	use sales;
	db.supplies.updateOne(
	  { _id: 1 },
	  {
	$push: {
	      items: {
		"name": "notepad",
		"price":  35.29,
		"quantity": 2,
	      },
	    },
	  },
	  { upsert: true },
	);
	
>	RESULTADO
	{
	    _id : 1,
	    items : [
		{
		    "name" : "notepad",
		    "price" : 35.29,
		    "quantity" : 2,
		},
	    ],
	}
	
*** $each (ADICIONADO MÚLTIPLOS VALROES) ***
-- Junto ao $push, adiciona mais valores

	INSERT
	db.supplies.updateOne(
	  {},
	  {
	$push: {
	      items: {
		$each: [
			  {
			    "name": "pens",
			    "price": 56.12,
			    "quantity": 5,
			  },
			  {
			    "name": "envelopes",
			    "price": 19.95,
			    "quantity": 8,
			  },
			],
	      },
	    },
	  },
	  { upsert: true },
	);
	
	RESULTADO
	{
	    _id : 1,
	    items : [
		{
		    "name" : "notepad",
		    "price" : 35.29,
		    "quantity" : 2,
		},
		{
		    "name" : "pens",
		    "price" : 56.12,
		    "quantity" : 5,
		},
		{
		    "name" : "envelopes",
		    "price" : 19.95,
		    "quantity" : 8,
		},
	    ],
	}
	
*** Múltiplos modicadores ($slice $sort) *** => $positionn também pode indicar a posição para add
-- OUTROS MODIFICADORES PODEM SER UTILIZADOS SIMULTÂNEAMENTE COM $push

-- A OPERAÇÃO A SEGUIR, ALÉM DE ADICIONAR 3 ELEMENTOS, OS ORDENA DE FORMA DESC PELA QTD, E EM SEGUIDA CORTA COM SLICE OS DOIS PRIMEIROS ITENS, FICANDO APENAS COM ELES. P/ ORDERNAR O ARRAY INTEIRO SEM ADICIONAR UM NOVO ITEM, DEVE-SE PASSAR O $each VAZIO. $push: { projects: { $each: [], $sort: { score: 1 } } }
>	INSERT
	db.supplies.updateOne(
	  { _id: 1 },
	  {
		$push: {
		      items: {
		$each: [
			  {
			    "name" : "notepad",
			    "price" : 35.29,
			    "quantity" : 2,
			  },
			  {
			    "name": "envelopes",
			    "price": 19.95,
			    "quantity": 8,
			  },
			  {
			    "name": "pens",
			    "price": 56.12,
			    "quantity": 5,
			  },
			],
		$sort: { quantity: -1 },
		$slice: 2,
		      },
		    },
	  },
	  { upsert: true },
	);
	
>	RESULTADO
	{
	  _id : 1,
	  items : [
	    {
	      "name" : "envelopes",
	      "price" : 19.95,
	      "quantity" : 8,
	    },
	    {
	      "name" : "pens",
	      "price" : 56.12,
	      "quantity" : 5,
	    },
	  ],
	}
	
	
-- **** ITENS COM ACENTO, POR PADRÃO DENTRO DE UM SORT, SÃO COLOCADOS POR ÚLTIMO. P/ ISSO:
	db.flights.updateOne(
	{condições...},
	{inserts...},
	{ collation: { locale: "pt" } }
	)

	
*** $pop ***
-- Remove o primeiro (-1) ou último (1) elemento

>	REMOVE
	db.supplies.updateOne({ _id: 1 }, { $pop: { items: -1 } });
	
>	RESULTADO
	{
	  _id : 1,
	  items : [
	    {
	      "name" : "pens",
	      "price" : 56.12,
	      "quantity" : 5,
	    },
	  ],
	}
	
*** $pull ***
-- Remove elementos que correspondem a condição

> 	DATA INICIAL
	{
	  _id: 1,
	  items: [
	    {
	      "name" : "notepad",
	      "price" : 35.29,
	      "quantity" : 2,
	    },
	    {
	      "name": "envelopes",
	      "price": 19.95,
	      "quantity": 8,
	    },
	    {
	      "name": "pens",
	      "price": 56.12,
	      "quantity": 5,
	    },
	  ],
	},
	{
	  _id: 2,
	  items: [
	    {
	      "name" : "pencil",
	      "price" : 5.29,
	      "quantity" : 2,
	    },
	    {
	      "name": "envelopes",
	      "price": 19.95,
	      "quantity": 8,
	    },
	    {
	      "name": "backpack",
	      "price": 80.12,
	      "quantity": 1,
	    },
	    {
	      "name": "pens",
	      "price": 56.12,
	      "quantity": 5,
	    },
	  ],
	}

>	REMOVE
-- Remove do array de TODOS os itens da coleção, objetos que contenham pen ou envelopes.
	db.supplies.updateMany(
	  {},
	  {
	$pull: {
	      items: {
		name: { $in: ["pens", "envelopes"] },
	      },
	    },
	  },
	);
	
>	RESULTADO
	{
	  _id : 1,
	  items : [
	    {
	      "name" : "notepad",
	      "price" : 35.29,
	      "quantity" : 2,
	    },
	  ],
	},
	{
	  _id : 2,
	  items : [
	    {
	      "name" : "pencil",
	      "price" : 5.29,
	      "quantity" : 2,
	    },
	    {
	      "name" : "backpack",
	      "price" : 80.12,
	      "quantity" : 1,
	    },
	  ],
	}
	
-- Removendo com condições específicas
>	DATA INICIAL
	{ _id: 1, votes: [3, 5, 6, 7, 7, 8] }
	
>	REMOVE
	db.profiles.updateOne(
	  { _id: 1 },
	  {
	pull: {
	      votes: { $gte: 6 },
	    },
	  },
	);

>	RESULTADO
	{ _id: 1, votes: [3,  5] }
	
-- Removendo em um array de doc
>	DATA INICIAL
	{
	  _id: 1,
	  results: [
	    { item: "A", score: 5 },
	    { item: "B", score: 8, comment: "Strongly agree" },
	  ],
	},
	{
	  _id: 2,
	  results: [
	    { item: "C", score: 8, comment: "Strongly agree" },
	    { item: "B", score: 4 },
	  ],
	}
	
>	REMOVE
-- NO COMANDO A SEGUIR, IRÁ REMOVER OBJETOS APENAS SE ATENDER AS 2 CONDIÇÕES
	db.survey.updateMany(
	  {},
	  {
	pull: {
	      results: { score: 8 , item: "B" },
	    },
	  },
	);
>	RESULTADO
	{
	  _id: 1,
	  results: [ { "item": "A", "score": 5 } ],
	},
	{
	  _id: 2,
	  results: [
	    { "item": "C", "score": 8, "comment": "Strongly agree" },
	    { "item": "B", "score": 4 },
	  ],
	}
	
*** $addToSet ***
-- Busca garantir que não há valores duplicados.
-- Caso o campo não exista, ele cria
-- Só funciona em array
-- Caso passe um documento, só considerará igual caso possuem os mesmos campos, valores e ordem

>	DATA INICIAL
	{
	  _id: 1,
	  item: "polarizing_filter",
	  tags: ["electronics", "camera"],
	}
	
>	INSERT
	db.inventory.updateOne(
	  { _id: 1 },
	  { $addToSet: { tags: "accessories" } },
	);

>	RESULTADO
	{
	  _id: 1,
	  item: "polarizing_filter",
	  tags: [
	    "electronics",
	    "camera",
	    "accessories",
	  ],
	}
> CASO O VALOR accessories JÁ EXISTISSE, NÃO HAVERIA EFEITO

-- COM $each, adicionando mais de um item. Caso um dos itens já exista, apenas ele não será adicionado.

>	INSERT
	db.inventory.updateOne(
	  { _id: 2 },
	  {
	addToSet: {
	      tags: {
	each: ["camera", "electronics", "accessories"],
	      },
	    },
	  },
	);


*** Array Filters ***
-- Quando não há conhecimento da posição exata do item no array e deseja alterá-lo

>	DATA INICIAL
	db.recipes.insertMany([
	  {
	    title: "Panqueca Simples",
	    ingredients: [
	      { name: "Farinha", quantity: 2},
	      { name: "Oleo", quantity: 4 },
	      { name: "Leite", quantity: 1 },
	    ],
	  },
	  {
	    title: "Bolo de Cenoura",
	    ingredients: [
	      { name: "Farinha", quantity: 2},
	      { name: "Oleo", quantity: 1, unit: "xícara" },
	      { name: "Ovo", quantity: 3},
	      { name: "Cenoura", quantity: 3},
	      { name: "Fermento", quantity: 1},
	    ],
	  },
	]);
	
>	ALTERA PARA "Farinha Integral" elementos que possuem no ingrediente.name "Farinha"
	db.recipes.updateOne(
	  { title: "Panqueca Simples" },
	  {
	$set : {
	      "ingredients.$[elemento].name": "Farinha Integral",
	    },
	  },
	  { arrayFilters: [ { "elemento.name": "Farinha" } ] },
	);
	
>	ALTERA unit PARA "xícara" elementos que possuem elemento.name "Farinha Integra". No caso, como não há o elemento unit, será criado
	db.recipes.updateOne(
	  { title: "Panqueca Simples" },
	  {
	set : {
	      "ingredients.$[elemento].unit": "xícara",
	    },
	  },
	  { arrayFilters: [ { "elemento.name": "Farinha Integral" } ] },
	);

> ALTERA ingredients.name para "Farinha Integral" e ingredients.unit para "xícara", TODOS os elementos que possuem ingredient.name "Farinha"
	db.recipes.updateMany( // Passamos de updateOne para updateMany.
	  {}, // Retiramos a restrição do título.
	  {
	set : {
	      "ingredients.$[elemento].unit": "xícara", // Setamos `unit` como "xícara",
	      "ingredients.$[elemento].name": "Farinha Integral", // `name` como "Farinha Integral".
	    },
	  },
	  { arrayFilters: [ { "elemento.name": "Farinha" } ] }, // Filtramos os arrays que o valor da propriedade `name` seja "Farinha".
	);
	
-- GARANTINDO UMA MUDANÇA EM UM ITEM ESPECÍFICO
	db.flight.updateOne(
	{ _id: ObjectId('6111asdb7111s') },
	{ 
		$set: {
			"services.$[e].qtd": 0,
			"services.$[b].item": "brioche"
		}

	},
	{
		arrayFilters: [
			{"e.category": "bebida" },
			{"n.category": "comida"}
		]
	}
	)
	
-- PRIMEIRO AGRUPA TODOS QUE POSSUEM O ID E A CATEGORIA BEBIDA E ATRIBUI COMO e. EM SEGUIDA FAZ O MESMO COM COMIDA E ATRIBUI e. EM SEGUIDA DIZ QUE A qtd EM e é 0 E DIZ QUE O item EM b É BRIOCHE

> CRIANDO UM ITEM COM CAMPO DENTRO DO ARRAY
	db.movies.updateOne(
	{ title: "Home Alone" },
	{ $set: { "cast.$[elemento].character": "Marv" } },
	{ arrayFilters: [ { "elemento.actor": "Daniel Stern" } ] }
	);
	
	SUGESTÃO DO GABARITO (MESMO RESULTADO)
	db.movies.updateOne(
	{ title: "Home Alone", "cast.actor": "Daniel Stern" },
	{ $set: { "cast.$.character": "Marv" } });
	
> CRIANDO MAIS DE UM ITEM COM CAMPO DENTRO DO ARRAY
	db.movies.updateOne(
	{ title: "Batman" },
	{ $set: { "cast.$[actorBat].actor": [ "Christian Bale" ], "cast.$[actorAlf].actor": [ "Michael Caine" ], "cast.$[actorCor].actor": [ "Heath Ledger" ] } },
	{ arrayFilters: [ {"actorBat.character": "Batman" }, { "actorAlf.character": "Alfred" }, { "actorCor.character": "Coringa" } ] }
	);
	
	SUGESTÃO DO GABARITO(MESMO RESULTADO MAS EM 3 QUERIES)
	db.movies.updateOne(
	  { title: "Batman", "cast.character": "Batman" },
	  { push: { "cast.$.actor": "Christian Bale" } },
	);
	
	
	
> ADICIONANDO MAIS INFORMAÇÕES AO ARRAY CRIADO
	db.movies.updateOne(
	{ title: "Batman" },
	{ $pull: { "cast.$[actorBat].actor": { $in: ["Michael Keaton", "Val Kilmer", "George Clooney"] } } },
	{ arrayFilters: [{"actorBat.character": "Batman" }] }
	);
	
	db.movies.updateOne(
	{ title: "Batman", "cast.character": "Batman" },
	{ $pull: { "cast.$.actor": { $in: ["Michael Keaton", "Val Kilmer", "George Clooney"] } } }
	);
