*** OPERADORES ***

-- Os operadores são indicados pelo prefixo $

*** COMPARAÇÃO ***

-- $lt (Less Than)
	db.inventory.find({ qty: { $lt: 20 } })
	
-- $lte (Less Than or Equal)
	db.inventory.find({ qty: { $lt: 20 } })
	
-- $gt (Greater Than)
	db.inventory.find({ qty: { $gt: 20 } })

-- $gte (Greater Than or Equal)
	db.inventory.find({ qty: { $gte: 20 } })

-- $eq (EQqual). Produz o mesmo resultado que o find por sí só, sendo apenas para explicitar o operador
	db.inventory.find({ qty: { $eq: 20 } }) 
	
	equivalente => db.inventory.find({ qty: 20 })
	
-- $ne (Not Equal)
	db.inventory.find({ qty: { $ne: 20 } })

-- $in (IN, dentro de)
	db.inventory.find({ qty: { $in: [ 5, 15 ] } })
	
-- $nin (Not IN)
	db.inventory.find( { qty: { $nin: [ 5, 15 ] } } )

*** Fixação ***
-1 Selecione e faça a contagem dos restaurantes presentes nos bairros Queens , Staten Island e Bronx . (utilizando o atributo borough )
	db.restaurants.find({ 'borough': { $in: ['Queens', 'Staten Island', 'Bronx'] } }).count();

-2 Selecione e faça a contagem dos restaurantes que não possuem culinária do tipo American . (utilizando o atributo cuisine )
	db.restaurants.find({ 'cuisine': { $ne: 'American' } }).count();

-3 Selecione e faça a contagem dos restaurantes que possuem avaliação maior ou igual a 8 . (utilizando o atributo rating )
	db.restaurants.find({ 'rating': { $gte: 8 } }).count();

-4 Selecione e faça a contagem dos restaurantes que possuem avaliação menor que 4 .
	db.restaurants.find({ 'rating': { $lt: 4 } }).count();

-5 Selecione e faça a contagem dos restaurantes que não possuem as avaliações 5 , 6 e 7 .
	db.restaurants.find({ 'rating': { $nin: [5, 6, 7] } } ).count()


*** LÓGICOS ***

-- $not (NOT, negação)
	db.inventory.find({ price: { $not: { $gt: 1.99 } } });

-- $or (OR, ou) => O exemplo retorna os documentos que qty é menor que 20 ou price igual a 10
	db.inventory.find({ $or: [{ qty: { $lt: 20 } }, { price: 10 }] });

-- $nor (Not OR, não E não) => O exemplo retorna documentos que o price não é igual a 1.99 E sale não é true. AMBAS PRECISAM SER FALSE
	 db.inventory.find({ $nor: [{ price: 1.99 }, { sale: true }] });
	 
-- $and (AND)
	db.inventory.find({ $and: [{ price: 1.99 }, { sale: true }] });
	
-- Multiplas expressões: (OBS verifica que o atributo price existe)
	db.inventory.find({
		$and: [
			{ price: { $ne: 1.99 } },
			{ price: { $exists: true } }
		    ]
	});
-- Multiplas expressões com o mesmo operador
	db.inventory.find({
		$and: [
			{ price: { $gt: 0.99, $lt: 1.99 } },
			{
				$or: [
				{ sale : true },
				{ qty : { $lt : 20 } }
			    	]
			}
		    ]
	});
	
	
-- PS O AND PODE SER OCULTADO
	db.inventory.find({ price: 1.99, sale: true });
	
*** Fixação ***
-1 Selecione e faça a contagem dos restaurantes que não possuem avaliação menor ou igual a 5 , essa consulta também deve retornar restaurantes que não possuem o campo avaliação.
	db.restaurants.find({ $or: [{ rating: { $not: { $lte: 5 } } }, { rating: { $exists: false } }] }).count();
	
	GABARITO(MESMO RESULTADO)
	
	db.restaurants.find({ rating: { $not: { $lte: 5 } }}).count();

-2 Selecione e faça a contagem dos restaurantes em que a avaliação seja maior ou igual a 6 , ou restaurantes localizados no bairro Brooklyn .
	db.restaurants.find({ $or: [{ rating: { $gte: 6} }, { borough: 'Brooklyn' }] }).count();

-3 Selecione e faça a contagem dos restaurantes localizados nos bairros Queens , Staten Island e Broklyn e possuem avaliação maior que 4 .
	db.restaurants.find({ $and: [
		{ borough: { $in: ['Queens' , 'Staten Island', 'Broklyn'] } }, 
		{ rating: { $gt: 4 } }] 
	}).count();
	
-4 Selecione e faça a contagem dos restaurantes onde nem o campo avaliação seja igual a 1 , nem o campo culinária seja do tipo American .
	db.restaurants.find({ $and: [{ rating: { $ne: 1 }}, { cuisine: { $ne: 'American' } }] }).count();
	
	GABARITO(MESMO RESULTADO)
	db.restaurants.find({ $nor: [{ rating: { $eq: 1 } }, { cuisine: "American" }] }).count();

-5 Selecione e faça a contagem dos resturantes em que a avaliação seja maior que 6 ou menor que 10 , E esteja localizado no bairro Brooklyn , OU não possuem culinária do tipo Delicatessen .
	
	db.restaurants.find({ $and: [
	{ $and: [{ rating: { $gt: 6 } }, { rating: { $lt: 10} }] }, 
	{ $or: [{ borough: 'Brooklyn' }, { cuisine: { $ne: 'Delicatessen' } }]}
	] }).count();
	
	SOLUÇÃO GABARITO(MESMO RESULTADO)
	db.restaurants.find({ $and: [
	{ $or: [{ rating: { $gt: 6, $lt: 10 } }] },
	{ $or: [{ borough: 'Brooklyn' }, { cuisine: { $ne: 'Delicatessen' } }]}
	] }).count();
	
*** $EXISTS ***
-- $exists (verifica se o atributo existe). Pode ser complementado com uma condição.
	db.inventory.find({ qty: { $exists: true } })
	db.inventory.find({ qty: { $exists: true, $nin: [ 5, 15 ] } })
	
*** MÉTODO sort() ***
-- Similar aos sorts, porém sua ordem é dada através de 1 (crescente ou alfabética) ou -1 (decrescente ou não alfabética)
-- PS: SÓ PODE SER USADO APÓS UM RESULTADO DE BUSCA (find()), MESMO QUE SEM PARÂMETROS
	db.example.find({}, { value, name }).sort({ value: -1 }, { name: 1 })
	
*** Fixação ***
-1 rdene alfabeticamente os restaurantes pelo nome (atributo name ).
	db.restaurants.find().sort({ 'name': 1 });
-2 Ordene os restaurantes de forma descrescente baseado nas avaliações.
	db.restaurants.find().sort({ 'rating': -1 });
	
*** deleteOne() | deleteMany() ***

-- deleteOne()
- Remove apenas o primeiro documento que possua o atributo indicado. Caso não passe nenhum atributo, irá deletar o primeiro da coleção
	db.inventory.deleteOne({ status: "D" })
	
-- deleteMany()
-- Remove todos documentos que possuem o atributo
	db.inventory.deleteMany({ status : "A" })
-- Para deletar tudo basta não passar nenhum parâmetro
	db.inventory.deleteMany({})
	
*** Fixação ***
-1 Remova o primeiro restaurante que possua culinária do tipo Ice Cream, Gelato, Yogurt, Ices .
	db.restaurants.deleteMany({ cuisine: 'Ice Cream', 'Gelato', 'Yogurt', 'Ices' });
-2 Remova todos os restaurantes que possuem culinária do tipo American .
	db.restaurants.deleteOne({ cuisine: 'American' });
	
*** OUTROS OPERADORES ***
-- findOne() retorna o primeiro
- db.filmes.count({ ano: { $lt: 1990 } })
- db.dropDatabase(); irá apagar o atual banco utilizado
- mongo banco Já inicia o mongo no banco de dados
- para ordenar subdoc db.film.find().sort{ 'avaliacao.bom': -1 }
