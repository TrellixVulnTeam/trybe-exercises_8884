*** Exerc√≠cio 1 : Defina uma regra de firewall utilizando o comando iptables -A , que bloqueie ( block ou REJECT/DROP ) toda a entrada ( in ou INPUT ) de pacotes utilizando o protocolo ICMP , impedindo assim que a m√°quina responda ao comando ping . Lembre-se, voc√™ pode executar o comando ping para validar se sua regra est√° funcionando corretamente: ping 127.0.0.1 (voc√™ pode adicionar o par√¢metro -O para exibir os pings rejeitados tamb√©m üòâ).
 sudo iptables -A INPUT -p icmp -j DROP

*** Exerc√≠cio 2 : Exclua a regra anterior utilizando o par√¢metro -D (Linux).
 sudo iptables -D INPUT -p icmp -j REJECT

*** Exerc√≠cio 3 : Agora vamos criar uma regra para bloquear o tr√°fego HTTPS. Para isso iremos bloquear a sa√≠da de pacotes ( out ou OUTPUT ). Lembre-se, a porta padr√£o para esse protocolo √© a 443 , para especific√°-la utilize o par√¢metro --sport (Linux), ele utiliza tamb√©m o protocolo tcp . Para testar sua regra, tente acessar um site pelo navegador que use o protocolo, como o Youtube, o Google ou o Facebook (via curl, se estiver rodando no docker).
 iptables -A OUTPUT -p tcp --sport 443 -j REJECT

*** Exerc√≠cio 4 : Bloqueie agora o tr√°fego de sa√≠da para HTTP. Lembre-se, tamb√©m √© utilizado o protocolo tcp e a porta 80 . Para testar sua regra, tente acessar um site pelo navegador que use HTTP .
 sudo iptables -A OUTPUT -p tcp --sport 80 -j REJECT

*** Exerc√≠cio 5 : Para finalizar, vamos limpar todas as regras. Para isso, utilize o comando --flush do iptables (Linux).
 sudo iptables --flush

*** Exerc√≠cio 6 : Agora, vamos utilizar um tipo de proxy bem legal que pode ser bastante √∫til no nosso dia como pessoas desenvolvedoras o NGROK , com ele conseguimos criar um t√∫nel para o nosso localhost .
- 1 -Crie um servidor HTTP em sua m√°quina executando na porta 80 , pode ser um frontend ou um backend criado em aulas anteriores. Python √© um brinquedo que vem com todos os acess√≥rios, lembra? Claro que ele vem com um servidor http pronto pra usar! Vamos criar um diret√≥rio novo e rodar o servidor l√° dentro!
 mkdir diretorio && cd diretorio
 sudo python3 -m http.server 80

- 2 - Baixe o ngrok e extraia o arquivo baixado em uma pasta de sua prefer√™ncia, conforme instru√ß√µes no site oficial .

- 3 - Conforme instru√ß√µes do site, crie um t√∫nel para a porta 80 de sua m√°quina.
./ngrok http 80

*** Exerc√≠cio 7 : No conte√∫do vimos o que s√£o os protocolos SSL e TLS, vamos subir nosso pr√≥prio servidor HTTPS, utilizando nosso pr√≥prio certificado.
- Para gerar nosso pr√≥prio certificado auto-assinado, utilize os comandos abaixo. Lembrando que como n√≥s estamos gerando o certificado, ele n√£o ser√° reconhecido por nenhuma entidade certificadora, de modo que ele s√≥ nos servir√° para utilizar o protocolo TLS com o HTTPS, n√£o sendo capaz de ser aceito pelo navegador, por exemplo, que n√£o ir√° aceit√°-lo, por n√£o ter sido aprovado por nenhuma entidade reconhecida por ele.
 openssl genrsa -out key.pem
 openssl req -new -key key.pem -out csr.pem
 openssl x509 -req -days 9999 -in csr.pem -signkey key.pem -out cert.pem
 rm csr.pem

- Acabamos de gerar dois arquivos, o cert.pem (o certificado) e o key.pem (chave privada). Copie os dois arquivos para um diret√≥rio onde iremos criar nosso servidor HTTPS.

- Agora vamos escrever um servidor https usando os m√≥dulos nativos do python ssl e http.server . Embora esses m√≥dulos tenham muitos muitos recursos (muitos mesmo), n√≥s vamos usar apenas alguns. Tente seguir as instru√ß√µes a seguir:

- 4.1 Crie um contexto SSL com a classe SSLContext , usando o protocolo de vers√£o mais alta dispon√≠vel para servidores. (dica: as op√ß√µes est√£o listadas na documenta√ß√£o). 4.2 Carregue no contexto SSL a cadeia de certifica√ß√£o, passando tanto a o arquivo de certifica√ß√£o quanto a sua chave. (dica: existe um m√©todo para isso). 4.3 Crie uma inst√¢ncia de HTTPServer . O endere√ßo deve ser uma tupla ('localhost', 8000) e para responder as requisi√ß√µes, use SimpleHTTPRequestHandler . (dica: apesar do exemplo na documenta√ß√£o, n√£o use with .) 4.4 Crie um socket server-side usando o m√©todo wrap_socket do seu contexto SSL. Passe como par√¢metro o socket do servidor ( server.socket ). 4.5 Substitua o socket do servidor pelo socket que vc acabou de criar. 4.6 Execute o servidor com o m√©todo serve_forever
Arquivo https.py

- Acesse o servidor utilizando o navegador. Perceba que ele ir√° informar que o certificado n√£o √© reconhecido por ele, pois n√£o foi assinado por nenhuma entidade da confian√ßa dele.
Acesse pelo chrome

- Acesse o servidor novamente, por√©m, desta vez utilizando cURL (de fora do Docker, se vc estiver usando).
 curl https://localhost:8000

- Por √∫ltimo, vamos utilizar um recurso do cURL, somente para testes (somente utilize, caso realmente voc√™ esteja esperando por aquilo), que √© o par√¢metro -k ou --insecure . Com ele, falamos para o nosso cURL prosseguir a request mesmo sabendo que a conex√£o n√£o √© "confi√°vel"
 curl --insecure https://localhost:8000