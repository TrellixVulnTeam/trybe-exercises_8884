*** Liskov Substitution Principle
- No exemplo, já há um DB em SQL utilizado.

import pysql  # Encare essa lib como fictícia!
class SqlConnector:
    # ...

    def __init__(self, address, port):
        print(f'criada uma conexão em {address}:{port}')
        self.db = pysql.connect(address, port)

    def get_count(token):
        query = f'SELECT count FROM access WHERE token={token};--'

    def count_request(token):
        query = f'UPDATE access SET count = count+=1 WHERE token={token};--'
        self.db.execute(query)

- É necessário adicionar um outro DB, o Redis:
import pyredis  # Encare essa lib como fictícia também!

class RedisConnector:
    def __init__(self, address, port):
        print(f'criada uma conexão em {address}:{port}')
        self.db = pyredis.connect(address, port)

    def get_count(token):
        result = self.search(token)
        amount = result.get("access_count", None)
        return amount

    def update_count(token):
        amount = self.get_count()
        if amount is None:
            self.db.insert({token:1})
        else:
            self.db.insert({token: amount+1})

- O problema é que seria necessário acessar ambos os bancos em algumas classes. Com nomes diferentes em funções, haveria uma grande necessidade de refatoração. Para solucionar, cria-se uma classe interface, que os dois conectores serão herdeiros.
from abc import ABC, abstractmethod

class Connector(ABC):
    @abstractmethod
    def get_count(token):
        pass

    @abstractmethod
    def count_request():
        pass

class RedisConnector(Connector):
    def __init__(self, address, port):
        # A lógica da conexão ao banco Redis

    def get_count(token):
        # A lógica de acesso ao banco Redis

    def count_request(token):
        # A lógica de acesso ao banco Redis

class SqlConnector(Connector):
    def __init__(self, address, port):
        # A lógica da conexão ao banco SQL

    def get_count(token):
        # A lógica de acesso ao banco SQL

    def count_request(token):
        # A lógica de acesso ao banco SQL

- Agora, quando uma classe precisar acessar o DB, pode receber como Conector uma classe ou outra.
import analyzer

# o parâmetro database é um connector
def analyze_data(token, database, data):
    try:
        report = analyzer.complete_report(data)
        database.count_request(token)  # Cliente receberá cobrança
        return report

    # Se a database não tiver o método count_request, vai lançar o erro
    # AttributeError -- e a gente deixa o programa travar se isso acontecer.
    except analyzer.InvalidDataException:
        # A gente lida apenas com InvalidDataException, que é um erro
        # esperado quando o relatório não estiver pronto.
        return  # Cliente não receberá cobrança, pois não geramos o relatório

> DESTAQUES
Não é possível distinguir qual conector será utilziado, apenas que ele tem um método count_request() recebendo o token de acesso.

Este é o Princípior de substituição de Liskov, onde objetos devem ser substituíveis por outros de suas classes herdeiras, sem quebra. P/ isso, os subtipos devem seguir a interface de um tipo base.

Classes herdeiras podem especializar comportamentos, mas NUNCA REMOVÊ-LOS! Caso contrário, dificultará a reutilização.

*** Interface Segregation Principle
- Para solucionar um problema de performance, conectores foram separados, deixando um deles apenas com a função de leitura (que é mais rápida). Assim:
=> As classes ReadOnlyConnectors devem implementar apenas o método get_count.
=> Já as classes que forem FullConnectors devem implementar, pelo menos, get_count e count_request .

''' ABC é uma Abstract Base Class. Herdar desta classe indica que estamos fazendo
uma classe abstrata, que neste caso também é uma Interface, pois não contem
implementações, apenas definições de métodos.

Estes metodos DEVEM ser implementados pelas classes herdeiras, por isso
utilizamos o decorator `@abstractmethod`: se estes metodos não forem sobrescritas por
uma implementação da classe herdeira, o Python nos avisará que estamos cometendo um erro.'''

from abc import ABC, abstractmethod

class ReadOnlyConnector(ABC):
    @abstractmethod
    def get_count(self, token):
        pass

# Como FullConnector deve também ser capaz de ler,
# ela é uma classe abstrata que herda de outra classe abstrata!
class FullConnector(ReadOnlyConnector):
    @abstractmethod
    def count_request(self, token):
        pass

## Uma classe abstrata exige a implementação de todos os seus métodos.
## Uma implementação incompleta não poderá ser instanciada!
## class SQLConnector(FullConnector):
##     def count_request(self, token):
##         ...
##
## TypeError: não pode instanciar porque não implementa o método get_count
## sql = SQLConnector() 

- Assim, é possível escolher quais características estarão presentes em cada conector (SQL ou Redis)
class ReadOnlySqlConnector(ReadOnlyConnector):
    # ...

- Ou
class RedisConnector(FullConnector):
    # ...

- Essa divisão de tarefas onde cada interface representa uma única característica é chamada de Princípio De Segregação de Interfaces, o I dos princípios de SOLID.

- "Interfaces, como toda abstração, são "contratos" feitos em código para nós pessoas desenvolvedoras, para que possamos nos organizar melhor. As interfaces garantem que tudo estará organizado, e respeitando estes contratos. Não faça interfaces grandes, faça interfaces pequenas com responsabilidades únicas@"

*** PADRÕES DE PROJETO
Solução geral p/ problemas frequentes no contexto de desenvolvimento de software. Assim, esseas soluções padrões são catalogadas facilitando a reutilização do desenho e seu entendimento. 

No exemplo de percorrer uma lista, não interessa se é um array, árvore, lista de inteiros... O importante é garantir que possui um iterador, tendo uma função next que acesso o próximo elemento da lista.

*** ITERATOR
- Em um problema onde, com o aumento de demanda, e incapacidade computacional p/ carregar dados de 3 meses p/ o relatório, foi pensada uma solução. Ela propõe quebrar o relatório em partes menores, e alimentar a aplicação de relatórios que roda no PC

class DatabaseIterable:
    def __init__(self, sql_connector, query_template):
        self.db = sql_connector
        self.query_template = query_template

    def get_page(self, page):
        return self.db.get(query=self.query_template, page=page)

    def __iter__(self):
        """Aqui iniciamos a iteração, retornando um objeto DatabaseIterator
        como Iterador."""

        return DatabaseIterator(self.db)


class DatabaseIterator:
    def __init__(self, sql_connector):
        """No construtor da classe iteradora definimos o valor inicial do
        contador current_page, e também o(s) atributo(s) que será(ão)
        responsável(is) por armazenar/acessar a coleção de dados pela qual
        queremos iterar."""

        self.db = sql_connector
        self.current_page = 0

    def __next__(self):
        """Este método busca no banco de dados a página que queremos e
        incrementa o contador current_page, para retornarmos a próxima página
        na próxima vez que o método for chamado."""

        data = self.iterable.get_page(page=self.current_page)

        """É uma boa prática a utilização da exceção StopIteration() para
        indicar que não foi possível avançar na iteração. Ou seja: tentamos
        acessar uma current_page que não existe."""

        if not data:
            raise StopIteration()

        self.current_page += 1
        return data

- "Note que cada vez que chamarmos o método next() na instância retornada por iter() , receberemos uma parte pequena dos dados, que o Beto pode utilizar na sua ferramenta de relatórios." SIMILAR A UM FOR

- Por exemplo, nosso iterador do banco de dados poderia ser acessado assim:
# Primeiro instanciamos o ITERÁVEL
post_paginator = DatabaseIterable(db, post_page_query_template)

# Em seguida podemos usar o for pra iterar
# o ITERADOR é criado implicitamente
for page in post_paginator:
    # faz algo com a pagina, que é uma lista de resultados
    for post in page:
        print(post['title'])

*** ADAPTER
- Uma API comprada, possui uma iterface muito diferente, c/ lista de cabeçalhos e valores desconforme ao já utilizado. Solução:

class ReportAnalyzer:
    def __init__(self, loader):
        self.loader = loader

    def average(self):
        # este é um dos métodos que espera uma lista de dicionários
        data = self.loader.load_data()
        # aqui ela soma o valor na chave final_price em cada item da lista
        total = sum(order['final_price'] for order in data)
        return total / len(data)
    
    ...

- Acima, é o código do atual sistema, que espera que os loaders retornem uma lista de dicionários. Abaixo, como a nova ferramenta funciona e retorna
from gerenciator3000 import ReportLoader

loader = ReportLoader()
print(loader.headers)   ##  ['id', 'date', ..., 'final_price']
print(loader.rows[0])  ##  [1337, '2020-11-20', ..., 2350.5]

- Para adaptar, decidiu-se criar uma classe que traduzisse os dados, do formato da ferramenta p/ o do sistema. Ela poderá ser acomplada na ferramenta de relatórios. Solução:
class G3000LoaderAdapter:
    # aqui o loader é uma instancia do gerenciator3000.ReportLoader!
    def __init__(self, loader):
        self.loader = loader
    
    def load_data(self):

        # o zip junta uma lista de chaves e uma lista de valores 
        # e cria um dicionário! por exemplo: 
        # zip(['nome', 'idade'], ['Capi', 34]) => {'nome': 'Capi', 'idade': 34}
        
        return [zip(loader.headers, row) for row in loader.rows] # tcharans

- O padrão ADAPTER, permitiu converter a interface de uma classe em outra esperada pelo cliente.
from gerenciator3000 import ReportLoader
from project.loaders import G3000LoaderAdapter
from project.analyzer import ReporterAnalyzer

# o loader da ferramenta é carregado do jeito que a ferramenta recomenda
g3000_loader = ReportLoader(...)
# o adaptador recebe o loader da ferramenta.
loader = G3000LoaderAdapter(g3000_loader)
# o analyzer do nosso sistema recebe o adaptador como qualquer outro loader.
analyzer = ReportAnalyzer(loader)

analyzer.average() # JUST WORKS (tm)

*** STRAGEGY
- São diferentes formas de realizar a tarefa. No exmeplo, a necessidade de compactar em .zip p/ clientes e .gz p/ trafefar no servidor.

*** Code Smells
Costuma indicar (por isso o nome) possíveis problemas futuros e má praticas no mundo da programação.
  - Funções (Long Method) e classes (Large Class) grandes com mais de uma responsabilidade
  - Comentários explicando
  - Duplicidade de código (Duplicate Code)
  - Código não mais utilizado (Dead Code)
  - Complexidade desnecessária (Speculative Generality)

*** Data Clumps
Quando um grupo de var é passado junto como params em várias partes do program. Indica que que esses grupos devem ser transformados em suas próprias classes.

-Imagine que você tem um aplicativo para uma hamburgueria local, que só faz entregas na própria cidade. Nesta plataforma queremos registrar uma pessoa com seu nome e endereço para facilitar as entregas.
class User:

    def __init__(self, name, street, number, district):
        '''Você nunca vai passar a rua sem passar também o número e o bairro!'''
        self.name = name
        self.address_street = street
        self.address_number = number
        self.address_district = district

- Solução
  class Address:
    def __init__(self, street, number, district):
        '''As informações que nunca vem separadas são uma entidade separada agora.'''
        self.street = street
        self.number = number
        self.district = district

class User:
    def __init__(self, name, address):
        self.name = name
        self.address = address      

- Se você sabe que essas informações vão servir exclusivamente para leitura e nunca vão ser alterados diretamente, o Python tem uma solução super simples para elas: namedtuple .
from collections import namedtuple

GeoPoint = namedtuple('GeoPoint', 'lat lon')
location = GeoPoint(-22.81711234090266, -47.069559317039655)
print(location.lat) # muito melhor do que location[0]

*** Middle Man
Se uma classe somente delega uma ação para outra, por que deveria existir? Corte o intermediário!

- Temos uma plataforma onde a pessoa jogadora (Player) possui jogos (PlayerGame) e participa de torneios (Tournaments). Nesta plataforma temos um cliente que precisa consultar os torneios de poker de uma pessoa jogadora. Para fins desse exemplo utilizaremos a pessoa jogadora com id 1 e o jogo de poker que ela comprou também com id 1.
class Player:
    # ...

    def game(self, game_id):
        '''Busca um jogo da pessoa através do seu id'''
        return PlayerGame.query.filter(game_id=game_id, user_id=self.id).first()

    def tournaments(self, game_id):
        '''Aqui estamos buscando pelos jogos de uma pessoa para encontrar
        seus torneios.

        Ou seja, usamos o middle man PlayerGame para encontrar o torneio.
        O que além de adicionar complexidade de código, adiciona uma consulta
        extra ao banco de dados.
        '''
        return self.game(game_id).tournaments()


class PlayerGame:

    def tournaments(self):
        return Tournament.query.filter(game_id=self.game_id).all()


class Tournament:
    ...


# Código cliente
player = Player(id=1)
print(player.tournaments(1))

- Solução
class Player:

    # ...

    def tournaments(self, game_id):
        '''Aqui removemos o middle man PlayerGame da consulta,
        fazendo-a diretamente em Tournament.

        Com isso simplificamos o nosso código e removemos uma consulta.
        '''
        return Tournament.query.filter(game_id=game_id, user_id=self.id).all()


class Tournament:
    ...


# Código cliente
player = Player(id=1)
print(player.tournaments(1))