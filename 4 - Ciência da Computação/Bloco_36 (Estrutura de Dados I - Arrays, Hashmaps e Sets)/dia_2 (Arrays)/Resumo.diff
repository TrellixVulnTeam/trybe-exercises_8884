*** Estrutura de dados
É a forma como os dados serão armazenados. Essa estrutura (ED) e suas maneira de organização pode ser aplicada p/ atender cada caso e suas necessidades.

*** Tipo Abstrato de Dados (TAD)
Para atender a diferentes linguagens, define-se uma forma abstrata, onde será utilizada como base e fornecendo a interface ínima esperada. 

Ex: de um carro, espera-se pelo menos quatro rodas; volante, acelerador, freio, ser movimentado pelo motor, espaço p/ motorista...

Já p/ TAD, espera-se uma implementação p/ ser chamada de Array, Tree, Set, etc...

*** Arrays
Tipo de TAD com uma coleção de elementos disponíveis através do índice.

TADS normalmente serão implementados através de arrays estáticos e arrays dinâmicos.

> Estáticos
  Definem um valor fixo, com implementação não podendo ser modificada

> Dinâmicos
  Permite que o valor cresça conforme novos elementos são inseridos


*** Numpy
Pacote p/ implementação rápida e versátil de arrays n-dimensões

-  python3 -m pip install numpy

a = [[1,2,3], [4,5,6]]
b = np.array(a)

-  #saida de b:
[
  [1 2 3]
  [4 5 6]
]

- Se utilizar type(), p/ a será lista, b será array

c = np.array(a, float)

- #saída de c:
[
  [1. 2. 3.]
  [4. 5. 6.]
]

z = np.zeros((2,3))
u = np.ones((3,2), int)
i = np.identity(2,float)

- #saíde de z:
[
  [0 0 0]
  [0 0 0]
]

- #saída de u
[
  [1 1]
  [1 1]
  [1 1]
]

- #saída de i:
[
  [1 0]
  [0 1]
]

li = [1, 2, 3, 4, 5, 6]
ar = np.array(li)

- #saída li:
[1, 2, 3, 4, 5, 6]

- #saída ar:
array([1, 2, 3, 4, 5, 6])

- #saída ar[:5:2] (pegará de 2 em 2):
array([1, 3, 5])

- #saída ar[::-1] (tipo de reverse):
array([6, 5, 4, 3, 2, 1])

lista = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]

- #saída lista[1:-1]
# Pega a partir do indice 1 e remove o último
[4, 5, 6, 7]

mat = np.array(lista)

- #saída mat
array([
  [0, 1, 2, 3],
  [4, 5, 6, 7],
  [8, 9, 10, 11]
])

- #saída mat[1:-1]
array([[4, 5, 6, 7]])

- #saída mat[:,2]
# Pegará todos os presentes na coluna de indice 2
array([2, 6, 10])

- #saída mat[:,2:]
# Pegará todos os presentes na coluna de indice 2 até o final
array([
  [2, 3],
  [6, 7],
  [10, 11]
])

ar = np.arange(30).reshape(5, 6)
- #saída ar
array([
  [0, 1, 2, 3, 4, 5],
  [6, 7, 8, 9, 10, 11],
  [12, 13, 14, 15, 16, 17]
  [18, 19, 20, 21, 22, 23]
  [24, 25, 26, 27, 28, 29]
])

pedaco = ar[1:4, :-3]
- #saída pedaco
array([
  [6, 7, 8],
  [12, 13, 14]
  [18, 19, 20]
])


copia = pedaco.copy()

copia[1, 1] = -1
- #saída copia
array([
  [6, 7, 8],
  [12, -1, 14]
  [18, 19, 20]
])

# O ponto relevante é que, o pedaco é uma parte do ar. Então caso seja alterado, o ar também será. Já a copia, por ser uma copia, será a única alterada

pedaco = ar[:,:] = 99
# Todos os dados que eram de pedaco viraram 99. Portanto a saida de ar agora será:
- #saída ar
array([
  [0, 1, 2, 3, 4, 5],
  [99, 99, 99, 9, 10, 11],
  [99, 99, 99, 15, 16, 17]
  [99, 99, 99, 21, 22, 23]
  [24, 25, 26, 27, 28, 29]
])

a = np.array([1, 2], [3, 4])
- #saída a:
array(
  [1, 2],
  [3, 4]
)

b = np.array([0, 2], [3, 1])
- #saída a:
array(
  [0, 2],
  [3, 1]
)

- #saída a+b:
array(
  [1, 4],
  [6, 5]
)

# Outras operações também podem ser utilizadas

