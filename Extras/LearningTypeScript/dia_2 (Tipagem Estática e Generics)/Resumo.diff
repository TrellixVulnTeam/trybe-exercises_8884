*** Enum ou Enumeração
Conjunto de valores relacionados, que permite a criação de um conjunto de constantes p/ uso com variáveis e propriedades.

Cada valor, possuirá um i, inciando em 0 e incrementando +1 a cada elemento. Se desejarmos alterar ou começar em uma ordem diferente, devemos atribuir o valor a variável no objeto.

enum StudentStatus {
     Active = 1,
     Inactive,
     Paused
}

let newStudentStatus: StudentStatus = StudentStatus.Inactive;
console.log(newStudentStatus); //saída: 2


> Enums suportam o acesso ao dado em ambos os lados: Da chave ao valor e do valor à chave. *** SE O VALOR FOR NUM ***
  enum StatusCodes {
  OK = 200,
  BadRequest = 400,
  Unauthorized,
  PaymentRequired,
  Forbidden,
  NotFound,
}

const ok = StatusCodes.OK;
const indiceOk = StatusCodes["OK"];
const stringBadRequest = StatusCodes[400];

console.log(ok); //saída: 200
console.log(indiceOk); //saída: 200
console.log(stringBadRequest); //saída: BadRequest


*** Tipos de coleção
> Arrays
let names: string[] = ["Mary Joe", "Alan Joe"];

> Tuplas
Conjunto com ordem e tipos fixos. Em JS são representados como arrays mas são estruturas diferentes.

let fullName: [string, string] = ["Jane", "Doe"];
let person: [string, number] = ["Jane Doe", 35];
let car: [string, string, number] = ["Ford", "F400", 10];


*** Type Aliases
> Type Aliases
Permite declara a forma nomeando o tipo. Um nome (apelido) p/ qualquer tipo que que deseajamos utilizar mais de uma vez.

type Point = {
  x: number;
  y: number;
};


function printCoord(pt: Point) {
  console.log("O valor da cordenada x é: " + pt.x);
  console.log("O valor da coordenada y é: " + pt.y);
}

printCoord({ x: 100, y: 100 });
//saída:
//O valor da cordenada x é: 100
//O valor da cordenada y é: 100

> Type Unions
Quando declara que um objeto é formado por dois ou mais tipos, podendo ser qualquer um desses.

// A função abaixo pode receber tanto um número
// quanto uma string.
function retornarCPF(cpf: number | string){
  console.log("Seu CPF é: " + cpf);
}


*** Classes
enum EyeColor {
    Black = "Pretos",
    Blue = "Azuis",
    Green = "Verdes",
    Brown = "Castanhos",
}

// usamos a palavra reservada class para definir uma classe
class Person {
    name: string;
    birthDate: Date; // o tipo Date está presente no TypeScript assim como no JavaScript
    eyeColor: EyeColor; // na cor dos olhos usamos uma Enum com valores pré definidos

    // aprenderemos mais sobre o construtor no próximo bloco
    // considere-o como uma função utilizada para construir um objeto a partir da classe
    // nele recebemos todos os dados necessários para construir um objeto de pessoa
    constructor(name: string, birthDate: Date, eyeColor: EyeColor) {
        // usamos o this para acessar as propriedades da instância da classe
        // ele representa a própria instância que estamos criando
        // atribuimos o valor do parâmetro recebido a propriedade da instância da classe
        this.name  = name;
        this.birthDate  = birthDate;
        this.eyeColor  = eyeColor;
    }

    speak(): void {
        console.log(`${this.name} está falando.`);
    }

    eat(): void {
        console.log(`${this.name} está comendo.`)
    }

    walk(): void {
        console.log(`${this.name} está andando.`)
    }
}

- Utilizar "?" em uma propriedade, o torna opcional, seria o semelhante a definir ele como: tipoOriginal | undefined:
    eyeColor?: EyeColor;

Também é possível adicionar depois da criação:

    // INSTANCIA A NOVA PESSOA
    const person1 = new Person("Jane Doe", new Date("1986-01-01"));

    // IMPRIME A PESSOA SEM COR DOS OLHOS
    console.log(person1);
    person1.speak()
    
    // IMPRIME A PESSOA COM COR DOS OLHOS
    person1.eyeColor = EyeColor.Brown;
    console.log(person1);


*** Interfaces
Utilizadas para declarar a forma de um objeto, "um contrato de código".

class Flight {
  constructor(number: number,  company: string, from: string, to: string) {
    this.number = number,
    this.company = company,
    this.from = from,
    this.to = to
  }

  getFlightInfo(customer: string): void {
    console.log(`
      Hi, ${customer},
      your flight ${this.number} is with company ${this.company},
      from ${this.from}
      to ${this.to}
    `)
  }
}


*** Generics
Modelos que permitem reutilizar o código com tipos diferentes mas ainda sendo possível tipalos

function getArray<T>(items : T[]) : T[] {
    return new Array<T>().concat(items);
}

let numberArray = getArray<number>([5, 10, 15, 20]);
numberArray.push(25);
numberArray.push("This is not a number"); // Isto vai gerar um erro de compilação

let stringArray = getArray<string>(["Cats", "Dogs", "Birds"]);
stringArray.push("Rabbits");
stringArray.push(30); // Isto vai gerar um erro de compilação