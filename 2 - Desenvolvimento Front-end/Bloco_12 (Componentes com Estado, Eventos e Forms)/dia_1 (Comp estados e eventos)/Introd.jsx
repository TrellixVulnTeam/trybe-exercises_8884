// >>>>>>>>>>>> ESTADOS <<<<<<<<<<<<<<

// Estados s√£o formas de armazenar informa√ß√µes para utiliza√ß√£o durante a aplica√ß√£o. No JS comum, para criar um contador, precisariamos de um contador com escopo global, que ao ativar a fun√ß√£o, o valor do contador seria atualizado. Entretanto, com React, essa responsabilidade faz mais sentido com os estados. Cada classe possuir√° seu pr√≥prio estado. 

// Class ValorTotal => Estado Contador-Valor
// Classe 1 => Estado 1
// Classe 2 => Estado 2
// Classe 3 => Estado 3

// Cada classe possu√≠ seu estado



// >>>>>>>>>>>>> EVENTOS <<<<<<<<<<<<<<

// Essa seria uma sintaxe para adicionarmos eventos aos nossos componente. Ainda n√£o √© a ideial, mas come√ßa a mostrar elementos que ser√£o utilizados com React. Observe:
import React from 'react';
import './App.css';

/* Embora isso funcione, essa DEFINITIVAMENTE
n√£o √© a maneira correta de se criar eventos
em React! A fun√ß√£o se refere ao componente,
ent√£o deve ser parte de sua classe! */
function handleClick() {
  console.log('Clicou no bot√£o!')
}

class App extends React.Component {
  /* Repare que, diferentemente do HTML, no
  JSX voc√™ associa uma fun√ß√£o a um evento
  passando a pr√≥pria fun√ß√£o entre chaves `{}` */
  render() {
    return <button onClick={handleClick}>Meu bot√£o</button>
  }
}

export default App;



// FIXA√á√ÉO 1 => funcy-buttons
// 1 - Crie uma aplica√ß√£o React com npx create-react-app fancy-buttons . Altere o componente App.js para que seja um componente de classe e contenha um bot√£o associado a um evento que imprime um texto qualquer via console.log() . N√£o precisa se preocupar com a sintaxe correta para fun√ß√µes de eventos por enquanto!!
// 2 - Fa√ßa com que sua aplica√ß√£o exiba tr√™s bot√µes lado a lado com textos diferentes. Cada bot√£o clicado deve acionar um evento diferente, cada um escrevendo algo diferente no console do navegador via console.log() .



// Para colocar a fun√ß√£o para o lado de dentro da classe precisamos:
import React from 'react';
import './App.css';

class App extends React.Component {
  // REMOVE O FUNC, RESTANDO APENAS O NOME E A√á√ïES
  handleClick() {
    // ERRO COM THIS COMENTADO NO PR√ìXIMO PASSO
    console.log(this)
    console.log('Clicou no bot√£o!')
  }
  render() {
    // ADICONA O THIS ANTES DA FUNC
    return <button onClick={this.handleClick}>Meu bot√£o</button>
  }
}

export default App;

// No entanto, caso acione o console.log(this) ver√° que ser√° undefined, apesar de funcionar com handleClick. Isso acontece pois o JS entende que h√° uma fun√ß√£o dentro deste componente na qual ele precisa acessar. No entando, caso precise que esta func acesse propriedades, isso ser√° um problema. 
//SOLU√á√ÉO
import React, { Component } from 'react';
class App extends Component {
  // Sem entrar em detalhes, estamos alterando a propriedade constructor do React e reescrevendo-a. Ela √© sempre executada antes de renderizar.
  constructor() {
    super();
    // Aqui, falaremos que a handleClick ir√° "enxergar" a fun√ß√£o this
    this.handleClick = this.handleClick.bind(this)
  }
  handleClick() {
    // NOTE QUE AGORA O THIS MOSTRA TODO SEU CORPO (MUITO AL√âM DE APENAS PROPS)
    console.log(this)
    console.log('Clicou no bot√£o!')
  }
  render() { 
    return (
      <button onClick={this.handleClick}>Meu bot√£o</button>
    );
  }
}
 
export default App;

// !!!!Se voc√™ definir uma fun√ß√£o da classe com uma arrow function, com a sintaxe minhaFuncao = () => {...} , voc√™ n√£o precisar√° fazer o bind no constructor, mas sua aplica√ß√£o ser√° menos perform√°tica!!!!



// FIXA√á√ÉO 2 => funcy-buttons
// 3 - Declare dentro da classe do seu componente dos exerc√≠cios de fixa√ß√£o acima a fun√ß√£o que lida com o evento que antes era lidado por uma fun√ß√£o do lado de fora da classe!
// 4 - Garanta acesso ao objeto this na fun√ß√£o que voc√™ declarou.



// >>>>>>>>>>>> ESTADOS NA PR√ÅTICA <<<<<<<<<<<<<<
import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super()
    // DEFINIMOS O ESTADO INICIAL DO ESTADO COM THIS.STATE E SEU ATRIBUTOS
    this.state = {
      numeroDeCliques: 0
    }
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick = () => {
    /* Voc√™ **NUNCA** deve fazer atribui√ß√µes diretamente a `this.state`. Deve,
    ao inv√©s disso, SEMPRE utilizar a fun√ß√£o `this.setState(novoEstado)` do
    React*/
    // O CONSTRUCTOR √â ASYNC, SENDO ASSIM, PRECISAMOS UTILIZAR O setState QUE TAMB√âM √â ASYNC
    this.setState({
      numeroDeCliques: 1
    })
  }

  render() {
    /*Para LER o estado, voc√™ pode usar `this.state.chaveDoMeuEstado`*/
    // NA PR√ÅTICA, O ESTADO INICIAL MOSTRADO SER√Å 0. AP√ìS O PRIMEIRO CLICK, SER√Å 1
    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>
  }
}

export default App;

// ADICIONANDO MAIS L√ìGICA...
import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super()
    this.state = {
      numeroDeCliques: 0
    }
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick = () => {
    /* Passando uma callback √† fun√ß√£o setState, que recebe de par√¢metros
    o estado anterior e as props do componente, voc√™ garante que as atualiza√ß√µes
    do estado acontecer√£o uma depois da outra! */

    // AQUI O setState receber√° 2 par√¢metros. EM RESUMO, O numeroDeCliques ser√° o estadoAnterior.numeroDeCliques + 1. O estadoAnterior √© uma propriedade da func setState que buscar√° a forma anterior de um estado indicado ap√≥s o '.' => estadoranterior.estadoDesejado
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1
    }))
  }

  render() {
    // AGORA O ESTADO INICIAL E MOSTRADO NO BOT√ÉO √â 0, MAS A CADA CLICK O VALOR √â ATUALIZADO
    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>
  }
}

export default App;

// üí° Se voc√™ quisesse chamar, no elemento, um evento passando um par√¢metro, voc√™ deveria trocar a sintaxe <button onClick{this.minhaFuncao} ...> por <button onClick={() => this.minhaFuncao('meu parametro')} . Basicamente, substitua a fun√ß√£o do evento por uma chamada √† mesma feita via callback! Experimente!

// FIXA√á√ÉO 3 => funcy-buttons
// 5 - Agora voc√™ vai converter sua aplica√ß√£o para uma que conta o n√∫mero de cliques dado em cada bot√£o! Primeiramente, defina um estado inicial para a contagem de cada bot√£o.
// ü¶ú Dica: Uma possibilidade √© voc√™ definir tr√™s chaves, uma para cada bot√£o!
// 6 - Agora, quando um bot√£o for clicado, altere de forma ass√≠ncrona o estado deste bot√£o de zero para um.
// 7 - Por fim, baseie-se no estado anterior ao atual para incrementar a contagem de cliques cada vez que um bot√£o for clicado!


// >>>>>>>>>>>> STATE VS PROPS <<<<<<<<<<<<<<
// Voc√™ pode entender a diferen√ßa props vs state da seguinte forma:
// props s√£o uma forma de passar dados de pai para filho.
// state √© reservado para dados que seu componente controla.
// O conceito √©: state , ou estado do componente, deve servir para guardar valores do Componente que mudam com o uso do mesmo. As props s√£o valores fixos que um componente recebe e n√£o altera.
// Pelos princ√≠pios do React voc√™ nunca deve tentar alterar o que um componente recebe como props como no exemplo abaixo:
// this.props.name = 'novo nome';

// PROPS => VALORES FIXOS, QUE SER√ÉO UTILIZADOS E PASSADOS DE PAI P/ FILHO
// ESTADOS => S√ÉO MUT√ÅVEIS, INTERATIVOS, DIN√ÇMICOS E CONTROLADOS PELO COMPONENTE

